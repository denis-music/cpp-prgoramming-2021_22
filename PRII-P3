#include<iostream>
#include<ctime>
#include<string>

using namespace std;

class Datum {
private:
    int _dan, _mjesec, _godina;
    bool PrestupnaGodina(int godina) {
        return godina % 4 == 0 
            && godina % 100 != 0 
            || godina % 400 == 0;
    }
    int PosljednjiDanUMjesecu(int mjesec, int godina) {
        if (mjesec == 2)
            return 28 + PrestupnaGodina(godina);
        if (mjesec == 4 || mjesec == 6 || mjesec == 9 || mjesec == 11)
            return 30;
        return 31;
    }
    bool ValidanDatum(int dan, int mjesec, int godina) {
        return !(dan < 1 || dan>PosljednjiDanUMjesecu(mjesec, godina)
            || mjesec < 1 || mjesec>12 || godina < 1900);
    }
    void SetDatum(int dan, int mjesec, int godina) {
        _dan = dan;
        _mjesec = mjesec;
        _godina = godina;
    }
    tm GetTrenutniDatum() {
        tm datum;
        time_t trenutno = time(nullptr);
        localtime_s(&datum, &trenutno);
        return datum;
    }
public:  
    Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
        if (ValidanDatum(dan, mjesec, godina))
            SetDatum(dan, mjesec, godina);
        else 
            SetDanasnjiDatum();
    }
    void SetDanasnjiDatum() {
        tm danas = GetTrenutniDatum();
        SetDatum(danas.tm_mday, danas.tm_mon + 1, danas.tm_year + 1900);
    }
    void Prikazi() {
        cout << _dan << "." << _mjesec << "." << _godina << endl;
    }
    void AddDays(int brojDana) {

        while (brojDana > 0)
        {
            int danaDoKrajaMjeseca =
                PosljednjiDanUMjesecu(_mjesec, _godina) - _dan + 1;
            if (brojDana >= danaDoKrajaMjeseca) {
                brojDana -= danaDoKrajaMjeseca;
                _dan = 1;
                _mjesec++;
                if (_mjesec > 12) {
                    _mjesec = 1;
                    _godina++;
                }
            }
            else {
                _dan += brojDana;
                return;
            }
        
        }
    }
    string ToString() {
        return to_string(_dan) + "." + to_string(_mjesec) + "." +
            to_string(_godina);
    }
    char * ToCharArray() {
        const int max = 15;
        char* temp = new char[max];//17.3.2022
        char buffer[max];//"2022"

        _itoa_s(_dan, buffer, 10);//17
        strcpy_s(temp, max, buffer);
        strcat_s(temp, max, ".");
        _itoa_s(_mjesec, buffer, 10);//3
        strcat_s(temp, max, buffer);
        strcat_s(temp, max, ".");
        _itoa_s(_godina, buffer, 10);//3
        strcat_s(temp, max, buffer);


        return temp;
    }
    int GetDan()const { return _dan; }
    int GetMjesec()const { return _mjesec; }
    int GetGodinu()const { return _godina; }
};

class Osoba {
    char* _imePrezime;
    Datum _datumRodjenja;
public:
    Osoba(const char* imePrezime){}
    Osoba(const char * imePrezime, int dan, int mjesec, int godina)
        : _datumRodjenja(dan, mjesec, godina){}
    Osoba(const char* imePrezime, Datum dr)
        : _datumRodjenja(dr.GetDan(),dr.GetMjesec(), dr.GetGodinu()){}
    ~Osoba(){ delete[] _imePrezime; _imePrezime = nullptr; }
};
void main() {

    Osoba denis("Denis Music", 12, 12, 2012);


   /*Datum danas;
   danas.SetDanasnjiDatum();

   int brojDana = 0;
   do {
       cout << danas.ToString()<<endl;
       cout << danas.ToCharArray() << endl; //povratna vrijednost?

       cout << "Broj dana -> ";
       cin >> brojDana;
       danas.SetDanasnjiDatum();
       danas.AddDays(brojDana);    
   } while (1);*/
}
