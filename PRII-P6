#include<iostream>
#include<ctime>
#include<string>
#include<vector>
#include<list>
using namespace std;
const char* crt = "\n-------------------------------\n";
char* KreirajNizOd(const char* sadrzaj) {//Denis Music
    if (sadrzaj == nullptr) return nullptr;
    int velicina = strlen(sadrzaj) + 1;
    char* temp = new char[velicina];
    strcpy_s(temp, velicina, sadrzaj);
    return temp;
}
class Datum {
private:
    int _dan, _mjesec, _godina;
    bool PrestupnaGodina(int godina) {
        return godina % 4 == 0 
            && godina % 100 != 0 
            || godina % 400 == 0;
    }
    int PosljednjiDanUMjesecu(int mjesec, int godina) {
        if (mjesec == 2)
            return 28 + PrestupnaGodina(godina);
        if (mjesec == 4 || mjesec == 6 || mjesec == 9 || mjesec == 11)
            return 30;
        return 31;
    }
    bool ValidanDatum(int dan, int mjesec, int godina) {
        return !(dan < 1 || dan>PosljednjiDanUMjesecu(mjesec, godina)
            || mjesec < 1 || mjesec>12 || godina < 1900);
    }
    void SetDatum(int dan, int mjesec, int godina) {
        _dan = dan;
        _mjesec = mjesec;
        _godina = godina;
    }
    tm GetTrenutniDatum() {
        tm datum;
        time_t trenutno = time(nullptr);
        localtime_s(&datum, &trenutno);
        return datum;
    }
public:  
    Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
        if (ValidanDatum(dan, mjesec, godina))
            SetDatum(dan, mjesec, godina);
        else 
            SetDanasnjiDatum();
    }
    void SetDanasnjiDatum() {
        tm danas = GetTrenutniDatum();
        SetDatum(danas.tm_mday, danas.tm_mon + 1, danas.tm_year + 1900);
    }
    void Prikazi() {
        cout << _dan << "." << _mjesec << "." << _godina << endl;
    }
    void AddDays(int brojDana) {

        while (brojDana > 0)
        {
            int danaDoKrajaMjeseca =
                PosljednjiDanUMjesecu(_mjesec, _godina) - _dan + 1;
            if (brojDana >= danaDoKrajaMjeseca) {
                brojDana -= danaDoKrajaMjeseca;
                _dan = 1;
                _mjesec++;
                if (_mjesec > 12) {
                    _mjesec = 1;
                    _godina++;
                }
            }
            else {
                _dan += brojDana;
                return;
            }
        
        }
    }
    string ToString() {
        return to_string(_dan) + "." + to_string(_mjesec) + "." +
            to_string(_godina);
    }
    char * ToCharArray() {
        const int max = 15;
        char* temp = new char[max];//17.3.2022
        char buffer[max];//"2022"

        _itoa_s(_dan, buffer, 10);//17
        strcpy_s(temp, max, buffer);
        strcat_s(temp, max, ".");
        _itoa_s(_mjesec, buffer, 10);//3
        strcat_s(temp, max, buffer);
        strcat_s(temp, max, ".");
        _itoa_s(_godina, buffer, 10);//3
        strcat_s(temp, max, buffer);


        return temp;
    }
    int GetDan()const { return _dan; }
    int GetMjesec()const { return _mjesec; }
    int GetGodinu()const { return _godina; }
};

template<typename Tip>
Tip Saberi(Tip a, Tip b) {
    return a + b;
}
template<class T>
void Zamijeni(T & a, T& b) {
    T temp = a;
    a = b;
    b = temp;
}

template<class T>
class FITvector {
    T *_niz;
    int _trenutno;
    void ProsiriNiz() {
        int vel = _trenutno + 1;
        T * temp = new T[vel];
        for (size_t i = 0; i < _trenutno; i++)
            temp[i] = _niz[i];
        if (_niz != nullptr)
            delete[] _niz;
        _niz = temp;
    }
public:
    FITvector(){
        _niz = nullptr;
        _trenutno = 0;
    }
    ~FITvector(){
        if (_niz != nullptr)
            delete[] _niz;
        _niz = nullptr;
        _trenutno = 0;
    }
    void push_back(T obj) {
        ProsiriNiz();
        _niz[_trenutno++] = obj;
    }
    int size()const { return _trenutno; }
    T& operator[] (int indeks) {
        return _niz[indeks];
    }
    friend ostream& operator<< <>(ostream& COUT, FITvector<T>& obj);
};
template<class T>
ostream& operator<< <>(ostream& COUT, FITvector<T>& obj) {
    for (size_t i = 0; i < obj._trenutno ; i++)
        COUT << obj._niz[i] << ", ";
    COUT << endl;
    return COUT;
}
class Predmet {};
class OcjenaNastavnika {};
class Student {
    FITvector<Predmet> _polozeniPredmeti;
    FITvector<OcjenaNastavnika> _ocjeneNastavnika;
    FITvector<char*> _napomene;
public:
    bool DodajPolozeni(Predmet noviPredmet) {
        _polozeniPredmeti.push_back(noviPredmet);
    }
};

void main() {   

    int brojStudenata;
    FITvector<int> indeksi;
    cout << "Koliko studenata unosite -> ";
    cin >> brojStudenata;
    for (size_t i = 0; i < brojStudenata; i++)
        indeksi.push_back(210000 + i);
    
    cout << indeksi;    
    indeksi[2] = 255;
        
    /*int d = 10, c = 30;
    cout << "d = " << d << " c = " << c << endl;
    Zamijeni<int>(d, c);
    cout << "d = " << d << " c = " << c << endl;
    char a = 'a', b = 'b';
    cout << "a = " << a << " b = " << b << endl;
    Zamijeni<char>(a, b);
    cout << "a = " << a << " b = " << b << endl;*/
}
