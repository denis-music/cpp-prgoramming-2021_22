#include<iostream>
#include<ctime>
#include<string>
using namespace std;
const char* crt = "\n-------------------------------\n";
char* KreirajNizOd(const char* sadrzaj) {//Denis Music
    if (sadrzaj == nullptr) return nullptr;
    int velicina = strlen(sadrzaj) + 1;
    char* temp = new char[velicina];
    strcpy_s(temp, velicina, sadrzaj);
    return temp;
}
class Datum {
private:
    int _dan, _mjesec, _godina;
    bool PrestupnaGodina(int godina) {
        return godina % 4 == 0 
            && godina % 100 != 0 
            || godina % 400 == 0;
    }
    int PosljednjiDanUMjesecu(int mjesec, int godina) {
        if (mjesec == 2)
            return 28 + PrestupnaGodina(godina);
        if (mjesec == 4 || mjesec == 6 || mjesec == 9 || mjesec == 11)
            return 30;
        return 31;
    }
    bool ValidanDatum(int dan, int mjesec, int godina) {
        return !(dan < 1 || dan>PosljednjiDanUMjesecu(mjesec, godina)
            || mjesec < 1 || mjesec>12 || godina < 1900);
    }
    void SetDatum(int dan, int mjesec, int godina) {
        _dan = dan;
        _mjesec = mjesec;
        _godina = godina;
    }
    tm GetTrenutniDatum() {
        tm datum;
        time_t trenutno = time(nullptr);
        localtime_s(&datum, &trenutno);
        return datum;
    }
public:  
    Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
        if (ValidanDatum(dan, mjesec, godina))
            SetDatum(dan, mjesec, godina);
        else 
            SetDanasnjiDatum();
    }
    void SetDanasnjiDatum() {
        tm danas = GetTrenutniDatum();
        SetDatum(danas.tm_mday, danas.tm_mon + 1, danas.tm_year + 1900);
    }
    void Prikazi() {
        cout << _dan << "." << _mjesec << "." << _godina << endl;
    }
    void AddDays(int brojDana) {

        while (brojDana > 0)
        {
            int danaDoKrajaMjeseca =
                PosljednjiDanUMjesecu(_mjesec, _godina) - _dan + 1;
            if (brojDana >= danaDoKrajaMjeseca) {
                brojDana -= danaDoKrajaMjeseca;
                _dan = 1;
                _mjesec++;
                if (_mjesec > 12) {
                    _mjesec = 1;
                    _godina++;
                }
            }
            else {
                _dan += brojDana;
                return;
            }
        
        }
    }
    string ToString() {
        return to_string(_dan) + "." + to_string(_mjesec) + "." +
            to_string(_godina);
    }
    char * ToCharArray() {
        const int max = 15;
        char* temp = new char[max];//17.3.2022
        char buffer[max];//"2022"

        _itoa_s(_dan, buffer, 10);//17
        strcpy_s(temp, max, buffer);
        strcat_s(temp, max, ".");
        _itoa_s(_mjesec, buffer, 10);//3
        strcat_s(temp, max, buffer);
        strcat_s(temp, max, ".");
        _itoa_s(_godina, buffer, 10);//3
        strcat_s(temp, max, buffer);


        return temp;
    }
    int GetDan()const { return _dan; }
    int GetMjesec()const { return _mjesec; }
    int GetGodinu()const { return _godina; }
};

class Kooridante {
    int _X;
    int* _vrijednostiX;
    int _trenutno;
    void SacuvajVrijednost() {
        int velicina = _trenutno + 1;
        int* temp = new int[velicina];
        for (size_t i = 0; i < _trenutno; i++)
            temp[i] = _vrijednostiX[i];
        if (_vrijednostiX != nullptr)
            delete[] _vrijednostiX;
        _vrijednostiX = temp;
        _vrijednostiX[_trenutno] = _X;
        _trenutno++;
    }
public:
    Kooridante(int X = 0) { 
        _X = X;  
        _trenutno = 0;
        _vrijednostiX = nullptr;
    }
    Kooridante(const Kooridante & obj)
    {
        _X = obj._X;
        _trenutno = obj._trenutno;
        _vrijednostiX = new int[_trenutno];
        for (size_t i = 0; i < _trenutno; i++)
            _vrijednostiX[i] = obj._vrijednostiX[i];
    }
    Kooridante & operator= (Kooridante& obj)
    {
        if (this != &obj) {
            _X = obj._X;
            _trenutno = obj._trenutno;
            delete[] _vrijednostiX;
            _vrijednostiX = new int[_trenutno];
            for (size_t i = 0; i < _trenutno; i++)
                _vrijednostiX[i] = obj._vrijednostiX[i];
        }
        return *this;
    }
    ~Kooridante()
    {
        if (_vrijednostiX != nullptr)
            delete[] _vrijednostiX;
        _vrijednostiX = nullptr;
        _trenutno = 0;
    }
    int GetX()const { return _X; }
    Kooridante operator- (Kooridante obj) {
        return Kooridante(this->GetX() + obj.GetX());
    }
    friend ostream& operator<< (ostream& COUT, Kooridante & obj);
    friend istream& operator>> (istream& CIN, Kooridante& obj);
    void operator+= (Kooridante& obj) {
        SacuvajVrijednost();
        _X += obj._X;
    }
    bool operator==(Kooridante& obj) {
        if (_X == obj._X && _trenutno == obj._trenutno) {
            for (size_t i = 0; i < _trenutno; i++)
                if (_vrijednostiX[i] != obj._vrijednostiX[i])
                    return false;
            return true;
        }
        return false;
    }
    bool operator!=(Kooridante& obj) {
        return !(*this == obj);
    }
    int operator[] (int lokacija) {
        if(lokacija>=0 && lokacija<_trenutno)
            return _vrijednostiX[lokacija];       
    }
    Kooridante operator++() {
        SacuvajVrijednost();
        _X++;
        return *this;
    }   
    Kooridante operator++(int) {
        Kooridante temp(_X);
        SacuvajVrijednost();
        _X++;
        return temp;
    }
};
Kooridante operator+ (Kooridante obj1, Kooridante obj2) {    
    return Kooridante(obj1.GetX() + obj2.GetX());
}
ostream& operator<< (ostream& COUT, Kooridante& obj) {
    COUT << crt << "X = " << obj._X << endl;
    COUT << "RANIJE VRIJEDNOSTI = ";
    for (size_t i = 0; i < obj._trenutno; i++)
        COUT << obj._vrijednostiX[i] << ", ";
    COUT << crt;
    return COUT;
}
istream& operator>> (istream& CIN, Kooridante& obj) {
    cout << "X = ";
    CIN >> obj._X;
    return CIN;
}
void main() {      
    
    Kooridante FIT, MF(22);
    FIT++;
    ++FIT;   
    
}
